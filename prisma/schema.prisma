// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id               Int              @id @default(autoincrement())
//   email            String           @unique
//   username         String           @unique
//   password         String
//   followedBy       Follows[]        @relation("following")
//   following        Follows[]        @relation("follower")
//   profile          Profile?
//   visitedCountries VisitedCountry[]
//   savedCountries   SavedCountry[]
//   travelPlans      TravelPlan[]
// }

model Follows {
  follower    User?  @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User?  @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Profile {
  id       Int    @id @default(autoincrement())
  avatar   String
  fullName String
  about    String
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
}

model VisitedCountry {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  iso2        String
  countryName String
  month       Int
  year        Int
  rating      Int
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  tips        Tip[]
}

model Tip {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  city             String
  content          String
  visitedCountry   VisitedCountry? @relation(fields: [visitedCountryId], references: [id], onDelete: Cascade)
  visitedCountryId Int?
}

model SavedCountry {
  id          Int     @id @default(autoincrement())
  iso2        String
  countryName String
  user        User?   @relation(fields: [userId], references: [id])
  userId      String?
}

model TravelPlan {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  iso2        String
  countryName String
  month       Int
  year        Int
  isPublic    Boolean  @default(false)
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  followedBy       Follows[]        @relation("following")
  following        Follows[]        @relation("follower")
  profile          Profile?
  visitedCountries VisitedCountry[]
  savedCountries   SavedCountry[]
  travelPlans      TravelPlan[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
